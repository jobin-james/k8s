name: Tag and Release

on:
  push:
    branches:
      - master
    paths:
      - 'folder1/**'
      - 'folder2/**'
  workflow_dispatch:
    inputs:
      folder:
        description: "Select the folder"
        required: true
        type: choice
        options:
          - folder1
          - folder2
      bump-type:
        description: "Select version bump type"
        required: true
        default: "patch"
        type: choice
        options:
          - major
          - minor
          - patch

jobs:
  tag-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensure full commit history is fetched

      - name: Set Up Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Determine Changed Folder
        id: folder
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "folder=${{ github.event.inputs.folder }}" >> $GITHUB_ENV
          else
            # Check for changes in folder1 or folder2
            if git diff --name-only HEAD~1 | grep -q '^folder1/'; then
              echo "folder=folder1" >> $GITHUB_ENV
            elif git diff --name-only HEAD~1 | grep -q '^folder2/'; then
              echo "folder=folder2" >> $GITHUB_ENV
            else
              echo "No relevant changes found."
              exit 0
            fi
          fi

      - name: Fetch all tags
        run: git fetch --tags

      - name: Determine Next Version
        id: version
        run: |
          # Fetch the latest tag for the specific folder
          latest_tag=$(git tag --list "${{ env.folder }}/v*" | sort -V | tail -n 1)
          echo "Latest tag: $latest_tag"

          # Extract the major, minor, and patch components
          if [[ $latest_tag =~ ^${{ env.folder }}/v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            major=${BASH_REMATCH[1]}
            minor=${BASH_REMATCH[2]}
            patch=${BASH_REMATCH[3]}
          else
            major=0
            minor=0
            patch=0
          fi

          # Determine the new version based on bump type
          bump_type="${{ github.event.inputs.bump-type || 'patch' }}"
          case "$bump_type" in
            major)
              new_tag="${{ env.folder }}/v$((major + 1)).0.0"
              ;;
            minor)
              new_tag="${{ env.folder }}/v$major.$((minor + 1)).0"
              ;;
            patch)
              new_tag="${{ env.folder }}/v$major.$minor.$((patch + 1))"
              ;;
            *)
              echo "Invalid bump type: $bump_type"
              exit 1
              ;;
          esac

          echo "New tag: $new_tag"
          echo "tag=$new_tag" >> $GITHUB_ENV

      - name: Create Tag
        run: |
          git tag "${{ env.tag }}"
          git push origin "${{ env.tag }}"

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ env.tag }}" \
              --repo="$GITHUB_REPOSITORY" \
              --title="Release ${{ env.tag }}" \
              --generate-notes
