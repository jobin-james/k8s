name: Create Tag and Release

on:
  push:
    branches:
      - main  # Automatically run on push to main
  workflow_dispatch:  # Optional manual trigger
    inputs:
      bump-type:  # Specify the type of version bump
        description: "Select version bump type"
        required: true
        default: "patch"
        type: choice
        options:
          - major
          - minor
          - patch

jobs:
  create-release:
    name: Create Tag and Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Up Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Determine Next Version
        id: version
        run: |
          # Fetch all tags to determine the latest version
          git fetch --tags
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $latest_tag"

          # Extract the major, minor, and patch components
          if [[ $latest_tag =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            major=${BASH_REMATCH[1]}
            minor=${BASH_REMATCH[2]}
            patch=${BASH_REMATCH[3]}
          else
            major=0
            minor=0
            patch=0
          fi

          # Determine bump type based on manual input
          bump_type="${{ github.event.inputs.bump-type || 'patch' }}"
          case "$bump_type" in
            major)
              new_tag="v$((major + 1)).0.0"
              ;;
            minor)
              new_tag="v$major.$((minor + 1)).0"
              ;;
            patch)
              new_tag="v$major.$minor.$((patch + 1))"
              ;;
            *)
              echo "Invalid bump type: $bump_type"
              exit 1
              ;;
          esac

          echo "New tag: $new_tag"
          echo "tag=$new_tag" >> $GITHUB_ENV

      - name: Generate Changelog
        id: changelog
        run: |
          git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:"- %s" > changelog.txt
          echo "changelog=$(cat changelog.txt)" >> $GITHUB_ENV

      - name: Create Tag
        run: |
          git tag ${{ env.tag }}
          git push origin ${{ env.tag }}

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.tag }}
          release_name: "Release ${{ env.tag }}"
          body: ${{ env.changelog }}
          draft: false
          prerelease: false
