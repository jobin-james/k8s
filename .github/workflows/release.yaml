name: Tag and Release

on:
  push:
    branches:
      - master
    paths:
      - 'folder1/**'
      - 'folder2/**'
  workflow_dispatch:
    inputs:
      folder:
        description: "Select the folder"
        required: true
        type: choice
        options:
          - folder1
          - folder2
      bump-type:
        description: "Select version bump type"
        required: true
        default: "patch"
        type: choice
        options:
          - major
          - minor
          - patch

jobs:
  tag-and-release:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        folder: [folder1, folder2]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensure full commit history is fetched

      - name: Set Up Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Check for Changes in Folder
        id: folder-check
        run: |
          if git diff --name-only HEAD~1 | grep -q "^${{ matrix.folder }}/"; then
            echo "changes_detected=true" >> $GITHUB_ENV
          else
            echo "changes_detected=false" >> $GITHUB_ENV
          fi


      - name: Skip if No Changes
        if: env.changes_detected == 'false'
        run: echo "No changes detected in ${{ matrix.folder }}. Skipping."

      - name: Fetch all tags
        if: env.changes_detected == 'true'
        run: git fetch --tags

      - name: Determine Next Version
        if: env.changes_detected == 'true'
        id: version
        run: |
          latest_tag=$(git tag --list "${{ matrix.folder }}/v*" | sort -V | tail -n 1)
          echo "Latest tag: $latest_tag"

          if [[ $latest_tag =~ ^${{ matrix.folder }}/v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            major=${BASH_REMATCH[1]}
            minor=${BASH_REMATCH[2]}
            patch=${BASH_REMATCH[3]}
          else
            major=0
            minor=0
            patch=0
          fi

          bump_type="${{ github.event.inputs.bump-type || 'patch' }}"
          case "$bump_type" in
            major)
              new_tag="${{ matrix.folder }}/v$((major + 1)).0.0"
              ;;
            minor)
              new_tag="${{ matrix.folder }}/v$major.$((minor + 1)).0"
              ;;
            patch)
              new_tag="${{ matrix.folder }}/v$major.$minor.$((patch + 1))"
              ;;
            *)
              echo "Invalid bump type: $bump_type"
              exit 1
              ;;
          esac

          echo "New tag: $new_tag"
          echo "tag=$new_tag" >> $GITHUB_ENV

      - name: Create Tag
        if: env.changes_detected == 'true'
        run: |
          git tag "${{ env.tag }}"
          git push origin "${{ env.tag }}"

      - name: Create GitHub Release
        if: env.changes_detected == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ env.tag }}" \
              --repo="$GITHUB_REPOSITORY" \
              --title="Release ${{ env.tag }}" \
              --generate-notes
